; NASM (assembler, NASM converts assembly code into machine code for x86 and x86_64 architectures, which follow the CISC architecture model).

section .data	; used to store data and variables.
	
section .bss ; used to store uninitialized data and variables.
	
section .text	; section that organize the program instructions to be executed.
	global _start ; define "_start" as a global token for the linker. "_start" is the default entry point for the intial execution of the program, equivalent to the "main()" function.
		; The assembler is responsible for receiving the assembly source code and generating the object file or files the machine code corresponding to the processor architecture. In the end, a linker is needed to combine the object files (.o/.obj) into a final executable or to transform the "independent" object file generated by the assembler into and executable in the format that the operating system understands.
		; The assembler basically converts instructions and register mnemonics into binary opcodes corresponding to the processor registers of the specific architecture.
		; When a program doesn't depend on external dependencies (like this one in assembly), the linker can receive a single object file generated by the assembler/compiler and turn it into an executable program.


