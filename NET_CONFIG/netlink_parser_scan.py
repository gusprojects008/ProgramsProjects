import struct
import json

def kernel_response_parser(kernel_response, nl80211_family_id):
    offset = 0 # the offset is the starting point for data parse!
    nlmsg_response = []
    if kernel_response:
       while offset < len(kernel_response):
             nlmsg_len, nlmsg_type, nlmsg_flags, nlmsg_seq, nlmsg_pid, genlmsg_cmd, genlmsg_version, genlmsg_reserved = struct.unpack_from("IHHIIBBH", kernel_response, offset)
             # in a nl80211_cmd_new_scan_results response is returned multiples nlmsgs of each Access Point(AP) network!
             if nlmsg_type == nl80211_family_id and genlmsg_cmd == 34:              
                nested_offset = offset + struct.calcsize("IHHIIBBH")
                while nested_offset < (offset + nlmsg_len):
                      nla_len, nla_type = struct.unpack_from("HH", kernel_response, nested_offset)
                      nlattr = kernel_response[nested_offset:nested_offset + nla_len]
                      nla_format = f"HH{nla_len - struct.calcsize('HH')}s"
                      #nlmsg_response.append(((nlmsg_len, nlmsg_type, nlmsg_flags, nlmsg_seq, nlmsg_pid), (genlmsg_cmd, genlmsg_version, genlmsg_reserved), struct.unpack(nla_format, nlattr))) # to get each nlattr of nlmsg, more verbose!
                      nested_offset += (nla_len + 3) & (~ 3) # round nla_len to a multiple of 4
                # to get the latest nlattr, less verbose!                
                nlmsg_response.append(((nlmsg_len, nlmsg_type, nlmsg_flags, nlmsg_seq, nlmsg_pid), (genlmsg_cmd, genlmsg_version, genlmsg_reserved), struct.unpack(nla_format, nlattr)))
             if nlmsg_type == 16 and genlmsg_cmd == 1:
                nested_offset = offset + struct.calcsize("IHHIIBBH") # new offset just to cycle through the netlink attributes
                while nested_offset < (offset + nlmsg_len):
                      nla_len, nla_type = struct.unpack_from("HH", kernel_response, nested_offset)
                      nlattr = kernel_response[nested_offset:nested_offset + nla_len]
                      nla_format = f"HH{nla_len - struct.calcsize('HH')}s"
                      nlmsg_response.append((struct.unpack(nla_format, nlattr))) # add just attributes
                      nested_offset += (nla_len + 3) & (~ 3)
             offset += (nlmsg_len + 3) & (~ 3) # nlmsg_len               
    return nlmsg_response

def parser_nl80211_bss(bss_info): # netlink attributes parser NL80211_BSS BSS(Basic Set Service) AP infomations 
    AP_info = [] # contains all netlink attributes of NL80211_BSS and your informations
    offset = 0
    while offset < len(bss_info):
          nla_len, nla_type = struct.unpack_from("HH", bss_info, offset)
          nlattr = bss_info[offset:offset + nla_len]
          nla_format = f"HH{nla_len - struct.calcsize('HH')}s"
          AP_info.append(struct.unpack(nla_format, nlattr))
          offset += (nla_len + 3) & (~ 3)
    return AP_info

# Elements Informations(IEs) parser, a attribute between the attributes from nl80211_bss
def parser_IEs(IEs):
    AP_IEs = [] # contains all informations elements from AP
    offset = 0
    while offset < len(IEs):
          ie_id, ie_length = struct.unpack_from("BB", IEs, offset) # ie_id(1 byte), ie_length(1 byte)
          ie_format = f"BB{ie_length}s" # the ie_length is just the length of information 
          ie_element = struct.unpack_from(ie_format, IEs, offset) # ie_element full unpacked 
          AP_IEs.append((ie_element)) # groups each ie_element in a tuple 
          offset += ie_length + struct.calcsize("BB") # go to next ie_element, it is not necessary to line up for a multiple of 4
    return AP_IEs

def mac_converter(mac):
    return ':'.join(f'{byte:02x}' for byte in mac)

# returns the capatibily of rates of transmition from AP router
def calc_rates(rates):
    return [f'{(rate & 0x7f) * 500} Mbps' for rate in rates]

# returns signal quality and the approximate distance in metters between you and the AP router
def signal_analyser(signal_mbm, frequency, tx_router):
    # signal_mbm is the signal strength received by the device
    signal_mbm = struct.unpack("I", signal_mbm)
    if signal_mbm > 50 and signal_mbm < 70:
       quality = "Good"
    if signal_mbm >= 70 and signal_mbm < 90:
       quality = "Normal"
    if signal_mbm >= 90:
       quality = "Bad"

    # approximate distance with Path Loss formula
    signal_dbm = signal_mbm / 100.0
    #if frequency == 
    #distance = 10 ** (())

    return quality #, distance

def GCS_OUI_identify(GCS):
    GCS_OUI = mac_converter(GCS)
    GCS_OUI_dict = {
        '00:0f:ac:01': 'WEP-40',
        '00:0f:ac:02': 'TKIP',
        '00:0f:ac:04': 'AES_CCMP',
        '00:0f:ac:05': 'WEP-104',
        '00:0f:ac:06': 'BIP',
        '00:0f:ac:07': 'GCMP-128',
        '00:0f:ac:08': 'GCMP-256',
        '00:0f:ac:09': 'CCMP-256',
        '00:0f:ac:0a': 'BIP-GMAC-128',
        '00:0f:ac:0b': 'BIP-GMAC-256',
        '00:50:f2:01': 'Microsoft WEP',
        '00:50:f2:02': 'Microsoft TKIP',
        '00:50:f2:04': 'Microsoft AES-CCMP',
        '00:50:f2:05': 'Microsoft WPA proprietary',
        '00:90:4c:00': 'Broadcom proprietary',
        '00:e0:2f:00': 'Cisco',
        '00:14:a4:00': 'Atheros', 
    }
    return f"{GCS_OUI_dict.get(GCS_OUI, 'Unknown Type')} {GCS_OUI}" 

def AKM_OUI_identify(AKM):
    AKM_OUI = mac_converter(AKM)
    AKM_OUI_dict = {
        '00:0f:ac:01': 'WPA/RSN-PSK',
        '00:0f:ac:02': 'WPA/RSN-EAP',
        '00:0f:ac:03': 'FT-PSK',
        '00:0f:ac:04': 'FT-EAP',
        '00:0f:ac:05': 'WPA/RSN-SHA256-PSK',
        '00:0f:ac:06': 'WPA/RSN-SHA256-EAP',
        '00:0f:ac:07': 'SAE-WPA3',
        '00:0f:ac:08': 'FT-SAE',
        '00:0f:ac:09': 'AP',
        '00:0f:ac:0a': '802.1X',
        '00:0f:ac:0b': '802.1X-192' 
    }
    return f"{AKM_OUI_dict.get(AKM_OUI, 'Unknown Type')} {AKM_OUI}"
    
def mac_oui_vendors_identify(mac_oui):
    with open('./mac-vendors-export.json', 'r', encoding='utf-8') as file:
         data = json.load(file)
         vendors_name = {}
         for line in data:
             vendors_name[line['macPrefix']] = line['vendorName']
         return vendors_name.get(mac_oui.upper()[:8], 'Unknown Vendor Type')

def show_ap_info():
    AP_LIST = []
    try:
       kernel_response = kernel_response_parser(kernel_response_scan, 38)
       for nlmsg_ap in kernel_response:
           for nlmsg_info in nlmsg_ap:
               if isinstance(nlmsg_info, tuple):
                  if nlmsg_info[1] == 47: # 47 == 2f is NL80211_ATTR_BSS
                     AP_INFO = {}
                     AP_INFO['Vendor Specific (Router Informations)'] = []
                     for bss_attr in parser_nl80211_bss(nlmsg_info[2]):
                         if isinstance(bss_attr, tuple):
                            if bss_attr[1] == 1: # NL80211_BSS_BSSID bss attribute
                               AP_INFO['bssid'] = (mac_converter(bss_attr[2]), mac_oui_vendors_identify(mac_converter(bss_attr[2])))
                            if bss_attr[1] == 2: # NL80211_BSS_FREQUENCY bss attribute
                               AP_INFO['frequency'] = struct.unpack("I", bss_attr[2])[0] 
                            if bss_attr[1] == 5: # NL80211_BSS_CAPABILITY bss attribute
                               capability = struct.unpack("H", bss_attr[2])[0] # bitmap informations
                               capabilities = {
                                   "ESS (Is AP)": bool(capability & 0x0001), # bit 0
                                   "IBSS (Is ad-hoc)": bool(capability & 0x0002), # bit 1
                                   "Privacy (WEP Enabled)": bool(capability & 0x0010) # bit 2                 
                               }
                               AP_INFO['capabilities'] = capabilities
                            if bss_attr[1] == 6: # NL80211_BSS_INFORMATION_ELEMENTS bss attribute
                               for ie in parser_IEs(bss_attr[2]): # loop for IEs attributes per eid
                                   if isinstance(ie, tuple):
                                      if ie[0] == 0: # WLAN_EID_SSID eid attribute
                                         AP_INFO['ssid'] = ie[2].decode('utf-8', errors='ignore') if ie[2].decode('utf-8', errors='ignore') != '' else 'Hidden SSID'
                                      if ie[0] == 1: # WLAN_EID_RATES eid attribute
                                         AP_INFO['supported rates'] = calc_rates(ie[2])
                                      if ie[0] == 3: # WLAN_EID_DS_PARAMS eid attribute
                                         AP_INFO['current channel'] = struct.unpack('B', ie[2])[0]
                                      if ie[0] == 7: # WLAN_EID_COUNTRY eid attribute
                                         country_code = ie[2][:3].decode('utf-8', errors='ignore').strip()
                                         channels_info = []
                                         for info in range(3, len(ie[2]), 3):
                                             if len(ie[2][info:info+3]) == 3: # take a info full
                                                first_channel, num_channel, max_power = struct.unpack('BBB', ie[2][info:info+3])
                                                channels_info.append((first_channel, num_channel, max_power))
                                         AP_INFO['country'] = country_code, channels_info
                                      if ie[0] == 35: # WLAN_EID_TPC_REPORT eid attribute tx power signal from device
                                         AP_INFO['TPC report (AP transmission power)'] = struct.unpack('bb', ie[2])
                                      if ie[0] == 48: # WLAN_EID_RSN eid attribute # version, Group Data Cipher Suite, Pairwise Cipher Suit Count, Pairwise Cipher Suit List
                                         rsn_info = {}
                                         offset = 0
                                         version, GCS, PCSC = struct.unpack_from('<H4sH', ie[2], offset) 
                                         rsn_info['Group Cipher Suite(multicast/broadcast)'] = GCS_OUI_identify(GCS)
                                         offset += struct.calcsize("HIH")
                                         rsn_info['Pairwise Cipher Suites(unicast)'] = []
                                         for _ in range(PCSC):
                                             cipher_suite = struct.unpack_from("4s", ie[2], offset - struct.calcsize('H'))[0]
                                             rsn_info['Pairwise Cipher Suites(unicast)'].append(GCS_OUI_identify(cipher_suite))
                                             offset += struct.calcsize("I")
                                         offset -= struct.calcsize("H") # because of the for loop the offset is misaligned
                                         AKM_count = struct.unpack_from("H", ie[2], offset)[0]
                                         offset += struct.calcsize("H")
                                         rsn_info['AKM List'] = []                                      
                                         for _ in range(AKM_count):
                                             AKM = struct.unpack_from("4s", ie[2], offset)[0]
                                             rsn_info['AKM List'].append(AKM_OUI_identify(AKM))
                                             offset += struct.calcsize("I")
                                         capability_rsn = struct.unpack_from("H", ie[2], offset)[0]
                                         rsn_capabilities = {
                                             'Pre-Auth': bool(capability_rsn & 1),
                                             'No Pairwise': bool(capability_rsn & 2),
                                             'PTK Replay Counters': (capability_rsn & 12) >> 2,
                                             'GTK Replay Counters': (capability_rsn & 48) >> 4,
                                             'Management Frame Protection Required (MFPR)': bool(capability_rsn & 64),
                                             'Management Frame Protection Capable (MFPC)': bool(capability_rsn & 128),
                                             'Joint Multi-Band RSNA': bool(capability_rsn & 256),
                                             'PeerKey Enable': bool(capability_rsn & 512),
                                             'Extended Key ID': bool(capability_rsn & 0x4000),
                                             'OCVC': bool(capability_rsn & 0x8000)
                                         }
                                         rsn_info['RSN capabilities'] = rsn_capabilities              
                                         AP_INFO['RSN'] = rsn_info
                                      if ie[0] == 195: # WLAN_EID_TX_POWER_ENVELOPE eid attribute
                                         offset = 0
                                         AP_INFO['tx power envelope'] = []
                                         for _ in range(ie[1]):
                                             tx_power = struct.unpack_from("b", ie[2], offset)[0]
                                             AP_INFO['tx power envelope'].append(tx_power)
                                             offset += struct.calcsize("b")
                                      if ie[0] == 221: # WLAN_EID_VENDOR_SPECIFIC eid attribute
                                         vendor_format = f"3sB{ie[1] - struct.calcsize('3sB')}s"
                                         OUI_vendor, OUI_type, vendor_data = struct.unpack(vendor_format, ie[2])
                                         AP_INFO['Vendor Specific (Router Informations)'].append(((mac_converter(OUI_vendor), mac_oui_vendors_identify(mac_converter(OUI_vendor))), OUI_type, vendor_data))
                            if bss_attr[1] == 7: # NL80211_BSS_SIGNAL_MBM bss attribute
                               AP_INFO['signal dBm'] = struct.unpack("i", bss_attr[2])[0]
                     AP_LIST.append(AP_INFO)
       return AP_LIST
    except Exception as error:
           print(f"Ops Error ); {str(error)}")

kernel_response_scan = b'\xec\x02\x00\x00&\x00\x02\x00\x01\x00\x00\x00\xae?\x00\x00"\x01\x00\x00\x08\x00.\x00E\x01\x00\x00\x08\x00\x03\x00\x04\x00\x00\x00\x0c\x00\x99\x00\x02\x00\x00\x00\x00\x00\x00\x00\xbc\x02/\x00\n\x00\x01\x00x\x8c\xb52h\xe0\x00\x00\x0c\x00\x03\x00\x8c\xc1>_\x01\x00\x00\x00\x1b\x01\x06\x00\x00\x06casa 2\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x062\x04\x0c\x180`\x07\x06BR \x01\r\x1b#\x02\x1b\x00F\x05\xf3\xc0\x01\x00\x00\x05\x04\x00\x01\x00\x040\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00\xdd1\x00P\xf2\x04\x10J\x00\x01\x10\x10D\x00\x01\x02\x10G\x00\x10\x124Vx\x9a\xbc\xde\xf0\x124x\x8c\xb52h\xe0\x10<\x00\x01\x01\x10I\x00\x06\x007*\x00\x01 *\x01\x04-\x1a\xec\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x00\x7f\x08\x01\x00\x08\x80\x00\x00\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00 \x01\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x80\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x00\x0c\x00\r\x00\x8c\xc1>_\x01\x00\x00\x00\x1b\x01\x0b\x00\x00\x06casa 2\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x062\x04\x0c\x180`\x07\x06BR \x01\r\x1b#\x02\x1b\x00F\x05\xf3\xc0\x01\x00\x00\x05\x04\x00\x01\x00\x040\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00\xdd1\x00P\xf2\x04\x10J\x00\x01\x10\x10D\x00\x01\x02\x10G\x00\x10\x124Vx\x9a\xbc\xde\xf0\x124x\x8c\xb52h\xe0\x10<\x00\x01\x01\x10I\x00\x06\x007*\x00\x01 *\x01\x04-\x1a\xec\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x00\x7f\x08\x01\x00\x08\x80\x00\x00\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00 \x01\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x80\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x00\x06\x00\x04\x00d\x00\x00\x00\x06\x00\x05\x00\x11\x14\x00\x00\x08\x00\x02\x00\x85\t\x00\x00\x08\x00\x14\x00\x00\x00\x00\x00\x08\x00\n\x00p!\x00\x00\x0c\x00\x11\x00\xdf\xeaJ\xca\x15\x00\x00\x00\n\x00\x12\x00\\b\x8b\x80\x83\x8a\x00\x00\x0c\x00\x0f\x00\xdd\x92r\x0b2\x07\x00\x00\x08\x00\x07\x00\xf4\xe8\xff\xff\x08\x00\x17\x00\x03\x00\x00\x00t\x02\x00\x00&\x00\x02\x00\x01\x00\x00\x00\xae?\x00\x00"\x01\x00\x00\x08\x00.\x00E\x01\x00\x00\x08\x00\x03\x00\x04\x00\x00\x00\x0c\x00\x99\x00\x02\x00\x00\x00\x00\x00\x00\x00D\x02/\x00\n\x00\x01\x00lZ\xb0\xb0\xed\xf8\x00\x00\x0c\x00\x03\x00C\x81\xb8Re\x00\x00\x00\xe0\x00\x06\x00\x00\x07RIBEIRO\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x062\x04\x0c\x180`\x05\x04\x00\x01\x00\x02\xdd1\x00P\xf2\x04\x10J\x00\x01\x10\x10D\x00\x01\x02\x10G\x00\x108\x830\x920\x92\x18\x83\x9cw2\x1a\x02\x90\x02\xc4\x10<\x00\x01\x01\x10I\x00\x06\x007*\x00\x01 *\x01\x04-\x1a\xee\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x06\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x000\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\x0b\x05\x00\x00?\x12z\xdd\x07\x00\x0cC\x03\x00\x00\x00\x0c\x00\r\x00C\x81\xb8Re\x00\x00\x00\xe0\x00\x0b\x00\x00\x07RIBEIRO\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x062\x04\x0c\x180`\x05\x04\x00\x01\x00\x02\xdd1\x00P\xf2\x04\x10J\x00\x01\x10\x10D\x00\x01\x02\x10G\x00\x108\x830\x920\x92\x18\x83\x9cw2\x1a\x02\x90\x02\xc4\x10<\x00\x01\x01\x10I\x00\x06\x007*\x00\x01 *\x01\x04-\x1a\xee\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x06\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x000\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\x0b\x05\x00\x00?\x12z\xdd\x07\x00\x0cC\x03\x00\x00\x00\x06\x00\x04\x00d\x00\x00\x00\x06\x00\x05\x00\x11\x04\x00\x00\x08\x00\x02\x00\x85\t\x00\x00\x08\x00\x14\x00\x00\x00\x00\x00\x08\x00\n\x00\x98!\x00\x00\x0c\x00\x11\x00!OJ\xca\x15\x00\x00\x00\n\x00\x12\x00\\b\x8b\x80\x83\x8a\x00\x00\x0c\x00\x0f\x00\x84\xb8\x07\t2\x07\x00\x00\x08\x00\x07\x00P\xe2\xff\xff\x08\x00\x17\x00\x03\x00\x00\x00\\\x02\x00\x00&\x00\x02\x00\x01\x00\x00\x00\xae?\x00\x00"\x01\x00\x00\x08\x00.\x00E\x01\x00\x00\x08\x00\x03\x00\x04\x00\x00\x00\x0c\x00\x99\x00\x02\x00\x00\x00\x00\x00\x00\x00,\x02/\x00\n\x00\x01\x00z\x8c\xb5Bh\xe0\x00\x00\x0c\x00\x03\x00\x8a\xc1>_\x01\x00\x00\x00\xd4\x00\x06\x00\x00\x00\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x062\x04\x0c\x180`\x07\x06BR \x01\r\x1b\x05\x04\x00\x01\x00\x000\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00*\x01\x04-\x1a\xec\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x00\x7f\x08\x01\x00\x00\x80\x00\x00\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x80\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x0c\x00\r\x00\x8a\xc1>_\x01\x00\x00\x00\xd4\x00\x0b\x00\x00\x00\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x062\x04\x0c\x180`\x07\x06BR \x01\r\x1b\x05\x04\x00\x01\x00\x000\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00*\x01\x04-\x1a\xec\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x00\x7f\x08\x01\x00\x00\x80\x00\x00\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x80\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x06\x00\x04\x00d\x00\x00\x00\x06\x00\x05\x00\x11\x04\x00\x00\x08\x00\x02\x00\x85\t\x00\x00\x08\x00\x14\x00\x00\x00\x00\x00\x08\x00\n\x00`!\x00\x00\x0c\x00\x11\x00.+K\xca\x15\x00\x00\x00\n\x00\x12\x00\\b\x8b\x80\x83\x8a\x00\x00\x0c\x00\x0f\x00\xc4sa\x0c2\x07\x00\x00\x08\x00\x07\x00\xf4\xe8\xff\xff\x08\x00\x17\x00\x03\x00\x00\x00\\\x02\x00\x00&\x00\x02\x00\x01\x00\x00\x00\xae?\x00\x00"\x01\x00\x00\x08\x00.\x00E\x01\x00\x00\x08\x00\x03\x00\x04\x00\x00\x00\x0c\x00\x99\x00\x02\x00\x00\x00\x00\x00\x00\x00,\x02/\x00\n\x00\x01\x00z\x8c\xb5Rh\xe0\x00\x00\x0c\x00\x03\x00\xf9\xc5>_\x01\x00\x00\x00\xd4\x00\x06\x00\x00\x00\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x062\x04\x0c\x180`\x07\x06BR \x01\r\x1b\x05\x04\x00\x01\x00\x000\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00*\x01\x04-\x1a\xec\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x00\x7f\x08\x01\x00\x00\x80\x00\x00\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x00\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x0c\x00\r\x00\xf9\xc5>_\x01\x00\x00\x00\xd4\x00\x0b\x00\x00\x00\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x062\x04\x0c\x180`\x07\x06BR \x01\r\x1b\x05\x04\x00\x01\x00\x000\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00*\x01\x04-\x1a\xec\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x06\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x00\x7f\x08\x01\x00\x00\x80\x00\x00\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x00\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x06\x00\x04\x00d\x00\x00\x00\x06\x00\x05\x00\x11\x04\x00\x00\x08\x00\x02\x00\x85\t\x00\x00\x08\x00\x14\x00\x00\x00\x00\x00\x08\x00\n\x00Y!\x00\x00\x0c\x00\x11\x00\xae?K\xca\x15\x00\x00\x00\n\x00\x12\x00\\b\x8b\x80\x83\x8a\x00\x00\x0c\x00\x0f\x00\xaf4\xb0\x0c2\x07\x00\x00\x08\x00\x07\x00\xf4\xe8\xff\xff\x08\x00\x17\x00\x03\x00\x00\x00\x84\x02\x00\x00&\x00\x02\x00\x01\x00\x00\x00\xae?\x00\x00"\x01\x00\x00\x08\x00.\x00E\x01\x00\x00\x08\x00\x03\x00\x04\x00\x00\x00\x0c\x00\x99\x00\x02\x00\x00\x00\x00\x00\x00\x00T\x02/\x00\n\x00\x01\x00\xf0\xa71\xeeC\xc8\x00\x00\x0c\x00\x03\x00\x971\xcbQI\x00\x00\x00\xe6\x00\x06\x00\x00\x04Davi\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x072\x04\x0c\x180`\x07\x06BR \x01\r\x1b#\x02\x1b\x00F\x05\xf3\xc0\x01\x00\x00\x05\x04\x00\x01\x00@0\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00*\x01\x04-\x1a\xec\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x07\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x00\x7f\x08\x01\x00\x08\x80\x00\x00\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00 \x01\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x80\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x00\x00\x0c\x00\r\x00\x971\xcbQI\x00\x00\x00\xe6\x00\x0b\x00\x00\x04Davi\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x072\x04\x0c\x180`\x07\x06BR \x01\r\x1b#\x02\x1b\x00F\x05\xf3\xc0\x01\x00\x00\x05\x04\x00\x01\x00@0\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00*\x01\x04-\x1a\xec\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x07\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x00\x7f\x08\x01\x00\x08\x80\x00\x00\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00 \x01\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x80\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x00\x00\x06\x00\x04\x00d\x00\x00\x00\x06\x00\x05\x00\x11\x14\x00\x00\x08\x00\x02\x00\x8a\t\x00\x00\x08\x00\x14\x00\x00\x00\x00\x00\x08\x00\n\x00v \x00\x00\x0c\x00\x11\x00\x97\xb7N\xca\x15\x00\x00\x00\n\x00\x12\x00\\b\x8b\x80\x83\x8a\x00\x00\x0c\x00\x0f\x00n\x0e?\x1a2\x07\x00\x00\x08\x00\x07\x00\\\xe0\xff\xff\x08\x00\x17\x00\x03\x00\x00\x00\\\x02\x00\x00&\x00\x02\x00\x01\x00\x00\x00\xae?\x00\x00"\x01\x00\x00\x08\x00.\x00E\x01\x00\x00\x08\x00\x03\x00\x04\x00\x00\x00\x0c\x00\x99\x00\x02\x00\x00\x00\x00\x00\x00\x00,\x02/\x00\n\x00\x01\x00\xf2\xa71\xceC\xc8\x00\x00\x0c\x00\x03\x00\x9d1\xcbQI\x00\x00\x00\xd4\x00\x06\x00\x00\x00\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x072\x04\x0c\x180`\x07\x06BR \x01\r\x1b\x05\x04\x00\x01\x00\x000\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00*\x01\x04-\x1a\xec\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x07\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x00\x7f\x08\x01\x00\x00\x80\x00\x00\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x80\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x0c\x00\r\x00\x9d1\xcbQI\x00\x00\x00\xd4\x00\x0b\x00\x00\x00\x01\x08\x82\x84\x8b\x96\x12$Hl\x03\x01\x072\x04\x0c\x180`\x07\x06BR \x01\r\x1b\x05\x04\x00\x01\x00\x000\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00*\x01\x04-\x1a\xec\x11\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16\x07\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x0e\x14\x00\n\x00,\x01\xc8\x00\x14\x00\x05\x00\x19\x00\x7f\x08\x01\x00\x00\x80\x00\x00\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x80\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x06\x00\x04\x00d\x00\x00\x00\x06\x00\x05\x00\x11\x04\x00\x00\x08\x00\x02\x00\x8a\t\x00\x00\x08\x00\x14\x00\x00\x00\x00\x00\x08\x00\n\x00f \x00\x00\x0c\x00\x11\x00\xec\xf7N\xca\x15\x00\x00\x00\n\x00\x12\x00\\b\x8b\x80\x83\x8a\x00\x00\x0c\x00\x0f\x00V\x13:\x1b2\x07\x00\x00\x08\x00\x07\x00\\\xe0\xff\xff\x08\x00\x17\x00\x03\x00\x00\x00\x94\x02\x00\x00&\x00\x02\x00\x01\x00\x00\x00\xae?\x00\x00"\x01\x00\x00\x08\x00.\x00E\x01\x00\x00\x08\x00\x03\x00\x04\x00\x00\x00\x0c\x00\x99\x00\x02\x00\x00\x00\x00\x00\x00\x00d\x02/\x00\n\x00\x01\x00\xc8:5+P\xde\x00\x00\x0c\x00\x03\x00j\xa9r\x94\x0f\x03\x00\x00\xef\x00\x06\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x08\x82\x84\x8b\x96\x0c\x12\x18$\x03\x01\x0b\x05\x04\x00\x01\x00\x00 \x01\x00#\x02\x14\x00*\x01\x042\x040H`l\x0b\x05\x00\x00\x00\x00\x00F\x05s\x00\x01\x00\x006\x03\xa1\xb2\x01-\x1a\xee\x11\x17\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x04\x81\x08\x00=\x16\x0b\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdd\x16\x00P\xf2\x01\x01\x00\x00P\xf2\x04\x01\x00\x00P\xf2\x04\x01\x00\x00P\xf2\x020\x18\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x02\x00\x00\x0f\xac\x02\x00\x0f\xac\x04\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\r\x02\x02\x01\x00\x80\xdd\x07\x00\r\x02\x03\x01\x00@\xdd\x06\x00\xe0L\x02\x01`\x7f\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\r\x00j\xa9r\x94\x0f\x03\x00\x00\xef\x00\x0b\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x08\x82\x84\x8b\x96\x0c\x12\x18$\x03\x01\x0b\x05\x04\x00\x01\x00\x00 \x01\x00#\x02\x14\x00*\x01\x042\x040H`l\x0b\x05\x00\x00\x00\x00\x00F\x05s\x00\x01\x00\x006\x03\xa1\xb2\x01-\x1a\xee\x11\x17\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x04\x81\x08\x00=\x16\x0b\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdd\x16\x00P\xf2\x01\x01\x00\x00P\xf2\x04\x01\x00\x00P\xf2\x04\x01\x00\x00P\xf2\x020\x18\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x02\x00\x00\x0f\xac\x02\x00\x0f\xac\x04\x00\x00\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\r\x02\x02\x01\x00\x80\xdd\x07\x00\r\x02\x03\x01\x00@\xdd\x06\x00\xe0L\x02\x01`\x7f\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x04\x00d\x00\x00\x00\x06\x00\x05\x00\x11\x14\x00\x00\x08\x00\x02\x00\x9e\t\x00\x00\x08\x00\x14\x00\x00\x00\x00\x00\x08\x00\n\x00~\x1d\x00\x00\x0c\x00\x11\x008NZ\xca\x15\x00\x00\x00\n\x00\x12\x00\\b\x8b\x80\x83\x8a\x00\x00\x0c\x00\x0f\x00\x0c\xf4\x88G2\x07\x00\x00\x08\x00\x07\x00H\xdb\xff\xff\x08\x00\x17\x00\x03\x00\x00\x00|\x02\x00\x00&\x00\x02\x00\x01\x00\x00\x00\xae?\x00\x00"\x01\x00\x00\x08\x00.\x00E\x01\x00\x00\x08\x00\x03\x00\x04\x00\x00\x00\x0c\x00\x99\x00\x02\x00\x00\x00\x00\x00\x00\x00L\x02/\x00\n\x00\x01\x00^b\x8b\xa0\x83\x8c\x00\x00\x0c\x00\x03\x00O\x80\xe0\xc5\x15\x00\x00\x00\xe2\x00\x06\x00\x00\x00\x01\x08\x8c\x12\x98$\xb0H`l\x03\x01\x9d\x05\x04\x00\x01\x00\x00\x07\nBR $\x04#\x95\x05#\x003\x05\x80*:jz0\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00\x0b\x05\x00\x00\x00\x12z-\x1a\xef\x11\x03\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x04\x87\t\x00=\x16\x9d\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x0c\xb1y\xc93\xfa\xff\x0c\x03\xfa\xff\x0c\x03\xc0\x05\x01\x9b\x00\xfa\xff\x7f\x08\x00\x00\x08\x00\x00\x00\x00@\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x00\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x00\x00\x0c\x00\r\x00O\x80\xe0\xc5\x15\x00\x00\x00\xe2\x00\x0b\x00\x00\x00\x01\x08\x8c\x12\x98$\xb0H`l\x03\x01\x9d\x05\x04\x00\x01\x00\x00\x07\nBR $\x04#\x95\x05#\x003\x05\x80*:jz0\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00\x0b\x05\x00\x00\x00\x12z-\x1a\xef\x11\x03\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x04\x87\t\x00=\x16\x9d\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x0c\xb1y\xc93\xfa\xff\x0c\x03\xfa\xff\x0c\x03\xc0\x05\x01\x9b\x00\xfa\xff\x7f\x08\x00\x00\x08\x00\x00\x00\x00@\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd!\x00\x0c\xe7\x00\x00\x00\x00\xbf\x0c\xb1\x01\xc03*\xff\x92\x04*\xff\x92\x04\xc0\x05\x00\x00\x00*\xff\xc3\x03\x01\x02\x02\x00\x00\x06\x00\x04\x00d\x00\x00\x00\x06\x00\x05\x00\x11\x00\x00\x00\x08\x00\x02\x00\x99\x16\x00\x00\x08\x00\x14\x00\x00\x00\x00\x00\x08\x00\n\x000\x1a\x00\x00\x0c\x00\x11\x00\x19@g\xca\x15\x00\x00\x00\n\x00\x12\x00\\b\x8b\x80\x83\x8a\x00\x00\x0c\x00\x0f\x00\x1e\xb7\xfey2\x07\x00\x00\x08\x00\x07\x00\xa8\xe4\xff\xff\x08\x00\x17\x00\x03\x00\x00\x00\x94\x02\x00\x00&\x00\x02\x00\x01\x00\x00\x00\xae?\x00\x00"\x01\x00\x00\x08\x00.\x00E\x01\x00\x00\x08\x00\x03\x00\x04\x00\x00\x00\x0c\x00\x99\x00\x02\x00\x00\x00\x00\x00\x00\x00d\x02/\x00\n\x00\x01\x00\\\xa6\xe6X\x10c\x00\x00\x0c\x00\x03\x00\xc6\x10\xb9\'\xf5\x00\x00\x00\xee\x00\x06\x00\x00\x05JU_5G\x01\x08\x8c\x12\x98$\xb0H`l\x03\x01$\x07\x06BR $\r\x14\x05\x04\x00\x01\x00\x040\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00\xdd1\x00P\xf2\x04\x10J\x00\x01\x10\x10D\x00\x01\x02\x10G\x00\x108\x830\x920\x92\x18\x83\x9cw2\x1b\x01\x00\x03\xc4\x10<\x00\x01\x02\x10I\x00\x06\x007*\x00\x01 -\x1a\xef\x01\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16$\x05\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x0c\xb0\x01\xc01\xfa\xff\x0c\x03\xfa\xff\x0c\x03\xc0\x05\x01*\x00\xfa\xff\x7f\x08\x00\x00\x00\x00\x00\x00\x00@\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd\x07\x00\x0c\xe7\x00\x00\x00\x00\x00\x00\x0c\x00\r\x00\xc6\x10\xb9\'\xf5\x00\x00\x00\xee\x00\x0b\x00\x00\x05JU_5G\x01\x08\x8c\x12\x98$\xb0H`l\x03\x01$\x07\x06BR $\r\x14\x05\x04\x00\x01\x00\x040\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00\xdd1\x00P\xf2\x04\x10J\x00\x01\x10\x10D\x00\x01\x02\x10G\x00\x108\x830\x920\x92\x18\x83\x9cw2\x1b\x01\x00\x03\xc4\x10<\x00\x01\x02\x10I\x00\x06\x007*\x00\x01 -\x1a\xef\x01\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16$\x05\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x0c\xb0\x01\xc01\xfa\xff\x0c\x03\xfa\xff\x0c\x03\xc0\x05\x01*\x00\xfa\xff\x7f\x08\x00\x00\x00\x00\x00\x00\x00@\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd\x07\x00\x0c\xe7\x00\x00\x00\x00\x00\x00\x06\x00\x04\x00d\x00\x00\x00\x06\x00\x05\x00\x11\x00\x00\x00\x08\x00\x02\x00<\x14\x00\x00\x08\x00\x14\x00\x00\x00\x00\x00\x08\x00\n\x00\x14\x0f\x00\x00\x0c\x00\x11\x00\xd5\xa6\x92\xca\x15\x00\x00\x00\n\x00\x12\x00\\b\x8b\x80\x83\x8a\x00\x00\x0c\x00\x0f\x00\x89\xda\x86#3\x07\x00\x00\x08\x00\x07\x00\x9c\xe6\xff\xff\x08\x00\x17\x00\x03\x00\x00\x00\xa4\x02\x00\x00&\x00\x02\x00\x01\x00\x00\x00\xae?\x00\x00"\x01\x00\x00\x08\x00.\x00E\x01\x00\x00\x08\x00\x03\x00\x04\x00\x00\x00\x0c\x00\x99\x00\x02\x00\x00\x00\x00\x00\x00\x00t\x02/\x00\n\x00\x01\x00(\x87\xba\x9f\xf6\x87\x00\x00\x0c\x00\x03\x00H`i\x18n\x00\x00\x00\xf7\x00\x06\x00\x00\x0etorre stark_5G\x01\x08\x8c\x12\x98$\xb0H`l\x03\x01$\x07\x06BR $\r\x14\x05\x04\x00\x01\x00\x000\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00\xdd1\x00P\xf2\x04\x10J\x00\x01\x10\x10D\x00\x01\x02\x10G\x00\x108\x830\x920\x92\x18\x83\x9cw"$\x1f\x80\x00\xc4\x10<\x00\x01\x02\x10I\x00\x06\x007*\x00\x01 -\x1a\xef\x01\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16$\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x0c\xb0\x01\xc01\xfa\xff\x0c\x03\xfa\xff\x0c\x03\xc0\x05\x01*\x00\xfa\xff\x7f\x08\x00\x00\x00\x00\x00\x00\x00@\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd\x07\x00\x0c\xe7\x00\x00\x00\x00\x00\x0c\x00\r\x00H`i\x18n\x00\x00\x00\xf7\x00\x0b\x00\x00\x0etorre stark_5G\x01\x08\x8c\x12\x98$\xb0H`l\x03\x01$\x07\x06BR $\r\x14\x05\x04\x00\x01\x00\x000\x14\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x04\x01\x00\x00\x0f\xac\x02\x00\x00\xdd1\x00P\xf2\x04\x10J\x00\x01\x10\x10D\x00\x01\x02\x10G\x00\x108\x830\x920\x92\x18\x83\x9cw"$\x1f\x80\x00\xc4\x10<\x00\x01\x02\x10I\x00\x06\x007*\x00\x01 -\x1a\xef\x01\x17\xff\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\x16$\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x0c\xb0\x01\xc01\xfa\xff\x0c\x03\xfa\xff\x0c\x03\xc0\x05\x01*\x00\xfa\xff\x7f\x08\x00\x00\x00\x00\x00\x00\x00@\xdd\x18\x00P\xf2\x02\x01\x01\x00\x00\x03\xa4\x00\x00\'\xa4\x00\x00BC^\x00b2/\x00\xdd\x07\x00\x0cC\x03\x00\x00\x00\xdd\x07\x00\x0c\xe7\x00\x00\x00\x00\x00\x06\x00\x04\x00d\x00\x00\x00\x06\x00\x05\x00\x11\x00\x00\x00\x08\x00\x02\x00<\x14\x00\x00\x08\x00\x14\x00\x00\x00\x00\x00\x08\x00\n\x00\xe6\x0e\x00\x00\x0c\x00\x11\x00^c\x93\xca\x15\x00\x00\x00\n\x00\x12\x00\\b\x8b\x80\x83\x8a\x00\x00\x0c\x00\x0f\x00<oh&3\x07\x00\x00\x08\x00\x07\x00\x04\xde\xff\xff\x08\x00\x17\x00\x03\x00\x00\x00'

scan_results = show_ap_info()
print(scan_results)

#def parser_scan_results(scan_results):
 #   for ap in scan_results:
  #      print(ap)
#parser_scan_results(scan_results)
